% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_shadeplot.R
\name{create_shadeplot}
\alias{create_shadeplot}
\title{Plot Summary Data with Distribution and Labels}
\usage{
create_shadeplot(
  raw_data,
  summary_data,
  y_var,
  x_var,
  fill_var = NULL,
  facet_var = NULL,
  x_title = NULL,
  y_title = NULL,
  fill_title = NULL,
  slabpha = 0.4,
  slabjust = 1,
  scaling = 0.8,
  base_palette = cnc_palette,
  dots = FALSE,
  flipped = FALSE,
  mean_nudge_x = -0.2,
  mean_nudge_y = 0.5,
  stagger = 0.5,
  base_size = 16,
  axis_text_rel = 1.5,
  axis_title_rel = 2,
  label_text_size = 5,
  n_label_rel = 0.8,
  dotsize = 0.4,
  n_nudge = 0.5,
  direction = "left"
)
}
\arguments{
\item{raw_data}{A data.frame containing the raw observations.}

\item{summary_data}{A data.frame containing summary statistics. Must include the columns \code{mean}, \code{loci}, \code{upci}, \code{n} (sample size) and \code{min} (minimum value for label placement).}

\item{y_var}{A string specifying the name of the y variable (numeric) to be plotted.}

\item{x_var}{A string specifying the name of the x variable (typically categorical) to be plotted.}

\item{fill_var}{(Optional) A string naming a variable in the data for grouping by fill color.}

\item{facet_var}{(Optional) A string naming a variable on which to facet the plot.}

\item{x_title}{(Optional) A string to set as the x-axis label.}

\item{y_title}{(Optional) A string to set as the y-axis label.}

\item{fill_title}{(Optional) A string to set as the legend title for fill.}

\item{slabpha}{Numeric. The alpha transparency for the slab distribution. Default is 0.4.}

\item{slabjust}{Numeric. An adjustment parameter for the slab. Default is 1.}

\item{scaling}{Numeric. A scaling factor for the distribution. Default is 0.8.}

\item{base_palette}{A vector of colors to be used as the base palette. The default value is \code{cnc_palette}, which should be defined in your package or user workspace.}

\item{dots}{Logical. If \code{TRUE}, dot plots will be added to the distribution. Default is \code{FALSE}.}

\item{flipped}{Logical. If \code{TRUE}, the coordinate system is flipped. Default is \code{FALSE}.}

\item{mean_nudge_x}{Numeric. Horizontal nudge for the mean labels. Default is \code{-0.2}.}

\item{mean_nudge_y}{Numeric. Vertical nudge for the mean labels. Default is \code{0.5}.}

\item{stagger}{Numeric. A factor for dodging positions for elements in the plot. Default is \code{0.5}.}

\item{base_size}{Numeric. Base font size for the plot. Default is \code{16}.}

\item{axis_text_rel}{Numeric. Relative size for axis text. Default is \code{1.5}.}

\item{axis_title_rel}{Numeric. Relative size for axis titles. Default is \code{2}.}

\item{label_text_size}{Numeric. Font size for the mean text labels. Default is \code{5}.}

\item{n_label_rel}{Numeric. Relative size for the sample size (n) labels. Default is \code{0.8}.}

\item{dotsize}{Numeric. Dot size when dot plots are added. Default is \code{0.4}.}

\item{n_nudge}{Numeric. A nudge parameter for adjusting sample size labels. Default is \code{0.5}.}

\item{direction}{A string specifying the side for the slab ("left" or "right"). Default is \code{"left"}.}
}
\value{
A \code{ggplot2} object.
}
\description{
This function creates a summary plot combining raw data distributions and summary statistics. It renders a plot with violins/slabs (using \code{ggdist}), optional dot plots,
confidence interval ranges, sample size labels, and mean value text. The plot can also be faceted and/or have its coordinates flipped.
}
\examples{
\dontrun{
  library(ggplot2)

  # Create some example raw data
  set.seed(123)
  data_raw <- data.frame(
    x = rep(letters[1:3], each = 20),
    y = rnorm(60),
    group = rep(c("A", "B", "C"), each = 20)
  )

  # Create corresponding summary data
  data_summary <- data.frame(
    x = letters[1:3],
    mean = tapply(data_raw$y, data_raw$x, mean),
    loci = tapply(data_raw$y, data_raw$x, function(x) mean(x) - sd(x)),
    upci = tapply(data_raw$y, data_raw$x, function(x) mean(x) + sd(x)),
    n = tapply(data_raw$y, data_raw$x, length),
    min = tapply(data_raw$y, data_raw$x, min)
  )

  # Define a custom palette if needed
  cnc_palette <- c("steelblue", "tomato", "seagreen")

  # Generate the plot
  p <- create_shadeplot(
        raw_data = data_raw,
        summary_data = data_summary,
        y_var = "y",
        x_var = "x",
        fill_var = "group",
        x_title = "Category",
        y_title = "Value",
        fill_title = "Group",
        base_palette = cnc_palette
      )
  print(p)
}

}
